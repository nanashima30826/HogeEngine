///////////////////////////////////
//2025/02/17 
//nanashima Box.cpp
//////////////////////////////////
#include "box.h"
#include"renderer.h"
#include"main.h"
#include"modelRenderer.h"
#include"bullet.h"
#include"scene.h"
#include"manager.h"
#include"bullet.h"

std::string Box::m_classtexture="";
std::string Box::m_classmodel="asset\\model\\box.obj";
std::string Box::m_classVS="shader\\unlitTextureVS.cso";
std::string Box::m_classPS="shader\\unlitTexturePS.cso";
bool Box::m_collision = true;
void Box::Init()
{
	SetModel(m_classmodel);
	SetVS(m_classVS);
	SetPS(m_classPS);
	m_Component = new ModelRenderer(this);
	((ModelRenderer*)m_Component)->Load(GetModel());

	Renderer::CreateVertexShader(&m_VertexShader, &m_VertexLayout, GetVS());

	Renderer::CreatePixelShader(&m_PixelShader, GetPS());
	
}
void Box::DetailChange(std::string modelortexture, std::string vs, std::string ps)
{
	SetModel(modelortexture);
	SetVS(vs);
	SetPS(ps);
	((ModelRenderer*)m_Component)->Load(GetModel());

	Renderer::CreateVertexShader(&m_VertexShader, &m_VertexLayout, GetVS());

	Renderer::CreatePixelShader(&m_PixelShader, GetPS());
	
}
void Box::Uninit()
{
	m_VertexLayout->Release();
	m_VertexShader->Release();
	m_PixelShader->Release();
	
}
void Box::Update()
{
	oldpos = m_Position;
}
void Box::Draw()
{
	//m_Scale = XMFLOAT3(1, 1, 1);
	Renderer::GetDeviceContext()->IASetInputLayout(m_VertexLayout);

	Renderer::GetDeviceContext()->VSSetShader(m_VertexShader, NULL, 0);
	Renderer::GetDeviceContext()->PSSetShader(m_PixelShader, NULL, 0);

	XMMATRIX world, scale, rot, trans;

	scale = XMMatrixScaling(m_Scale.x, m_Scale.y, m_Scale.z);
	rot = XMMatrixRotationRollPitchYaw(m_Rotation.x, m_Rotation.y, m_Rotation.z);
	trans = XMMatrixTranslation(m_Position.x, m_Position.y, m_Position.z);
	world = scale * rot * trans;
	Renderer::SetWorldMatrix(world);

	m_Component->Draw();
}

std::string Box::GetClassModel()
{
	return m_classmodel;
}

std::string Box::GetClassVS()
{
	return m_classVS;;
}

std::string Box::GetClassPS()
{
	return m_classPS;
}

void Box::SetTexture(std::string texture)
{
	m_classtexture = texture;
}

void Box::SetModel(const std::string model)
{
	m_classmodel = model;
}

void Box::SetVS(const std::string vs)
{
	m_classVS = vs;
}

void Box::SetPS(const std::string ps)
{
	m_classPS = ps;
}

const char* Box::GetTexture()
{
	const char* ctexture = m_classtexture.c_str(); return ctexture;
}
const char* Box::GetModel()
{
	const char* cmodel = m_classmodel.c_str(); return cmodel;
}
const char* Box::GetVS()
{
	const char* cvs = m_classVS.c_str(); return cvs;
}
const char* Box::GetPS()
{
	const char* cps = m_classPS.c_str(); return cps;
}
bool Box::GetCollision()
{
	return m_collision;
}

